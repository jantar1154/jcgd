import "./Montserrat-Regular.ttf";

import { Button, VerticalBox, HorizontalBox, GridBox } from "std-widgets.slint";

component CustomButton {
    in property <color> color: whitesmoke;
    in property <color> text-color: black;
    in property <string> text: "";
    property <color> hover_color: rgb(200, 200, 220); 
    property <color> click_color: rgb(236, 111, 232); 

    callback clicked();

    states [
        hover when ta.has-hover: {
            rect.background: hover_color;
            rect.drop-shadow-blur: 3px;
            rect.drop-shadow-offset-x: 2px;
            rect.drop-shadow-offset-y: 2px;
        }
        hovernt when !ta.has-hover: {
            rect.background: color;
            rect.drop-shadow-blur: 5px;
            rect.drop-shadow-offset-x: 3px;
            rect.drop-shadow-offset-y: 3px;
        }

        pressed when ta.pressed: {
            rect.background: click_color;
        }

        released when !ta.pressed: {
            rect.background: color;
        }
    ]

    rect := Rectangle {
        background: color;
        padding: 5pt;
        drop-shadow-blur: 5px;
        drop-shadow-color: black;
        drop-shadow-offset-x: 3px;
        drop-shadow-offset-y: 3px;
        GridBox {
            padding: 5pt;
            Text {
                padding: 5pt;
                font-family: "Montserrat";
                color: text-color;
                text: text;
            }
        }
        ta := TouchArea {
            clicked => {clicked()}
            
        }
    }
}

component TopBar {
    callback fetch <=> fetch_btn.clicked;
    callback download <=> download_btn.clicked;
    callback info <=> info_btn.clicked;

    in property <string> status: "";

    // Whether to disable download and copy to clipboard buttons
    in property <bool> enable_dn_cb: false;

    height: 3rem;
    Rectangle {
        width: 100%;
        height: 100%;
        background: gray;
        HorizontalBox {
            alignment: start;
            fetch_btn := CustomButton {
                text: "Fetch new catgirl";
            }
            download_btn := CustomButton {
                text: "Download into computer";
            }
            info_btn := CustomButton {
                text: "Info";
            }
        }
    }
}

component Catgirl {
    in property <image> img;

    width: 95%;
    height: 95%;
    Rectangle {
        background: black;
        Image {
            width: 100%;
            height: 100%;
            source: img;
            image-fit: contain;
        }
    }
}

export component MainWindow inherits Window {
    callback fetch <=> tb.fetch;
    callback download <=> tb.download;
    callback info <=> tb.info;

    in property <string> status <=> tb.status;
    in property <image> img <=> cg.img;
    in property <bool> enable_dn_cb <=> tb.enable_dn_cb;

    default-font-family: "Montserrat";
    
    title: "jantar1154's catgirl downloader!";
    min-width: 640px;
    min-height: 480px;
    background: rgb(15, 20, 20);
    VerticalBox {
        y: 0;
        x: 0;
        alignment: stretch;
        tb := TopBar {}
        cg := Catgirl {}
    }
}